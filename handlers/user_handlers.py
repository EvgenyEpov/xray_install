from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import Message

import asyncio

from aiogram.utils.i18n import I18n

from config_data.config import ConfigFile, load_config_file, ConfigSSH, load_config_ssh

from media.send_media.send_media import send_key2, send_media2, send_key_admin

from services.xray_install import update_and_install_xray, process_server

path: ConfigFile = load_config_file()
host: ConfigSSH = load_config_ssh()

router = Router()


@router.message(Command('xray_install'))
async def handle_xray_command(message: Message):
    await message.answer("–ù–∞—á–∏–Ω–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É XRay –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö...")

    all_hosts = {
        **host.ssh_bot.hosts,
    }

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    tasks = []
    for ip, password in all_hosts.items():
        task = asyncio.create_task(update_and_install_xray(message, ip, password))
        tasks.append(task)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await asyncio.gather(*tasks, return_exceptions=True)


@router.message(Command('update_and_install'))
async def handle_xray_command(message: Message):
    await message.answer("–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö...")

    all_hosts = {
        **host.ssh_bot.hosts
    }

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    tasks = []
    for ip, password in all_hosts.items():
        task = asyncio.create_task(process_server(ip, password, message))
        tasks.append(task)

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    await asyncio.gather(*tasks, return_exceptions=True)


@router.message(Command(commands='creating_keys'))
async def process_test(message: Message, bot: Bot, i18n: I18n):
    #     """
    #     —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ª–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ª—é–¥–µ–π
    #     :return: –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    #     """
    parts = message.text.split()
    arg = parts[1] if len(parts) > 1 else None


@router.message(Command('install_full'))
async def handle_xray_full_deploy(message: Message):
    await message.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Üí —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Xray")

    all_hosts = host.ssh_bot.hosts

    # 1. –≠—Ç–∞–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_results = {}

    async def update_server(ip: str, password: str):
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è message —Å –ø—É—Å—Ç—ã–º –º–µ—Ç–æ–¥–æ–º answer
            class FakeMessage:
                async def answer(self, *args, **kwargs):
                    pass

            result = await process_server(ip, password, FakeMessage())
            update_results[ip] = {'status': True, 'message': "–°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ"}
        except Exception as e:
            update_results[ip] = {'status': False, 'message': f"–°–µ—Ä–≤–µ—Ä –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω, –æ—à–∏–±–∫–∞: {str(e)}"}

    await asyncio.gather(*[update_server(ip, pwd) for ip, pwd in all_hosts.items()])

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    success_update = sum(1 for r in update_results.values() if r['status'])
    report = "\n".join(
        f"üü¢ {ip} - {data['message']}" if data['status']
        else f"üî¥ {ip} - {data['message']}"
        for ip, data in update_results.items()
    )

    await message.answer(
        f"üî∑ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ({success_update}/{len(all_hosts)}):</b>\n{report}"
    )

    # 2. –≠—Ç–∞–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Xray
    if success_update == 0:
        await message.answer("‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤!")
        return

    install_results = {}

    async def install_xray(ip: str, password: str):
        try:
            await update_and_install_xray(ip, password)
            install_results[ip] = {'status': True, 'message': "xray –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"}
        except Exception as e:
            install_results[ip] = {'status': False, 'message': f"xray  –Ω–µ –æ–±–Ω–æ–≤–ª—ë–Ω –∏  –Ω–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ—à–∏–±–∫–∞: {str(e)}"}

    await asyncio.gather(*[
        install_xray(ip, pwd)
        for ip, pwd in all_hosts.items()
        if update_results[ip]['status']
    ])

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    success_install = sum(1 for r in install_results.values() if r['status'])
    install_report = "\n".join(
        f"üü¢ {ip} - {data['message']}" if data['status']
        else f"üî¥ {ip} - {data['message']}"
        for ip, data in install_results.items()
    )

    await message.answer(
        f"üî∑ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Xray ({success_install}/{success_update}):</b>\n{install_report}"
    )

    # –û–±—â–∏–π –∏—Ç–æ–≥
    await message.answer(
        f"üèÅ <b>–ò—Ç–æ–≥–∏ –¥–µ–ø–ª–æ—è:</b>\n"
        f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {success_update}/{len(all_hosts)}\n"
        f"‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Xray: {success_install}/{success_update}"
    )
